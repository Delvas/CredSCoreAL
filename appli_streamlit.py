# ==========================================================
# CredScoreAL.IA - Application Streamlit de Credit Scoring
# Version B√¢le II/III avec explicabilit√© + fallback
# Montants en FCFA et seuil de risque configurable
# ==========================================================

import streamlit as st
import pandas as pd
import numpy as np
import joblib
import time
from PIL import Image
from datetime import datetime
from tensorflow import keras

from explain_credit import show_explanations   # Module externe pour raisons de refus

# --- Param√®tres de l'application ---
icon = Image.open('CredScoreAl.ico')
st.set_page_config(
    page_title='CredScoreAL.IA',
    page_icon=icon,
    layout='centered',
    initial_sidebar_state='auto',
    menu_items={
        "Get Help": "mailto:fidelallou@gmail.com",
        "About": """
            ## CredScoreAL.ia
            Une plateforme innovante de credit scoring üí≥  
            D√©velopp√©e par **Fidel Allou**, **YOUSSOUF Y. TRAORE**, **DARI O. MOHAMADOU**  
            üìß Contact : [fidelallou@gmail.com](mailto:fidelallou@gmail.com)  
            üåê Site web : [digital-pay.com](https://digital-pay.com)
        """
    }
)

st.title("üí≥ Bienvenue sur CredScoreAL.ia")

# --- Sidebar utilisateur ---
utilisateur = st.sidebar.text_input("Entrez votre nom svp")
if utilisateur:
    st.sidebar.info(f"üë§ Bonjour {utilisateur}")
st.sidebar.write("## üìÖ Date et Heure Actuelles")
st.sidebar.write(f"**{datetime.now().strftime('%d-%m-%Y %H:%M:%S')}**")

# --- Sidebar : Param√®tres risque ---
st.sidebar.write("## ‚öñÔ∏è Param√®tres Risque (B√¢le II/III)")
seuil_risque = st.sidebar.number_input(
    "Seuil de perte attendue (EL) en FCFA",
    min_value=1_000,
    max_value=100_000_000,
    value=10_000_000,
    step=500_000
)

# --- Indicateur du mode explicatif ---
st.sidebar.markdown("## üßæ Mode explicatif")
st.sidebar.success("Fallback activ√© ‚úÖ")

# --- Chargement des mod√®les ---
logit = joblib.load("models/LogReg_opt_08_2025.pkl")
RandomForest = joblib.load("models/Random Forest_best_model_optimise_08_2025.pkl")
Tree = joblib.load("models/DecisionTree_best_model_optimise_08_2025.pkl")
model_Dl = keras.models.load_model("models/Model_deepLearning_3.keras", compile=False)
encoder = joblib.load("models/encoder.pkl")

# --- Fonction utilitaire ---
def get_proba_accept(pred):  #n.array
    """R√©cup√®re correctement la proba d'acceptation selon la forme de sortie du mod√®le."""
    if len(pred.shape) > 1 and pred.shape[1] == 2:   # Mod√®le sklearn (2 colonnes)
        return pred[0][1]
    else:                         #[0,5]                  # Mod√®le DL avec une seule sortie
        return pred[0][0]

# --- Formulaire principal ---
with st.form("form_score"):
    st.subheader("üë§ Informations Personnelles")
    age = st.number_input("√Çge", min_value=18, max_value=100, value=35)
    statut_proprietaire = st.selectbox("Statut propri√©taire", ["Propri√©taire", "Locataire", "Autre"])
    statut_proprietaire_enc = {"Propri√©taire": 2, "Locataire": 1, "Autre": 0}[statut_proprietaire]
    zone_habitat = st.selectbox("Zone d'habitat", ["Urbain", "Rurale"])
    zone_habitat = 1 if zone_habitat == "Urbain" else 0
    assurance_sante = st.radio("Assurance Sant√©", ["Oui", "Non"])
    assurance_sante = 1 if assurance_sante == "Oui" else 0

    if age < 25:
        Classe_age = 1
    elif age < 35:
        Classe_age = 2
    elif age < 50:
        Classe_age = 3
    else:
        Classe_age = 4

    st.subheader("üí∞ Informations Financi√®res / Bancaires")
    revenus_annuels = st.number_input("Revenus annuels (FCFA)", min_value=0, value=4_500_000, step=100_000)
    type_pret = st.selectbox("Cat√©gorie Pr√™t", ["Personnel", "Etude", "PME", "Immobilier", "Autre"])
    type_pret_enc = {"Personnel": 0, "Etude": 1, "PME": 2, "Immobilier": 3, "Autre": 4}[type_pret]
    historique_defaut = st.number_input("Historique de d√©faut (0 ou 1)", min_value=0, max_value=1, value=0)
    montant_demande = st.number_input("Montant demand√© (FCFA)", min_value=100_000, value=2_500_000, step=100_000)
    duree_historique = st.number_input("Dur√©e du pr√™t (ann√©es)", min_value=1, value=10)
    taux_interet = st.slider("Taux d'int√©r√™t (%)", min_value=0, max_value=100, value=15) / 100

    cap_remb = 1 if revenus_annuels >= montant_demande * 0.33 else 0
    recharge_mensuelle_moy = st.number_input("Recharge mensuelle moyenne (FCFA)", min_value=0, value=50_000, step=1000)
    solde_mobile_money_moy = st.number_input("Solde Mobile Money Moyen (FCFA)", min_value=0, value=100_000, step=1000)
    whatsapp = st.number_input("Anciennet√© Whatsapp (ann√©es)", min_value=0, value=5)
    facture_mensuelle = st.number_input("Montant factures mensuelles (FCFA)", min_value=0, value=200_000, step=10000)
    ratio_facture_charge = 12 * (facture_mensuelle / revenus_annuels) if revenus_annuels > 0 else 0
    indice_digit = (whatsapp + recharge_mensuelle_moy + solde_mobile_money_moy) / 3
    mature_finance = duree_historique / age if age > 0 else 0

    # --- Donn√©es brutes pour fallback ---
    raw_input = [
        age, revenus_annuels, statut_proprietaire_enc, type_pret_enc,
        montant_demande, taux_interet, historique_defaut, duree_historique,
        recharge_mensuelle_moy, solde_mobile_money_moy, whatsapp, facture_mensuelle,
        zone_habitat, assurance_sante, Classe_age, cap_remb, ratio_facture_charge,
        indice_digit, mature_finance
    ]
    raw_df = pd.DataFrame([raw_input], columns=[
        "Age", "Revenu annuel", "Statut propri√©taire", "Type pr√™t",
        "Montant demand√©", "Taux int√©r√™t", "Historique d√©faut", "Dur√©e historique",
        "Recharge mensuelle", "Solde Mobile Money", "Whatsapp", "Factures mensuelles",
        "Zone habitat", "Assurance sant√©", "Classe √¢ge", "Capacit√© remboursement",
        "Ratio factures/charges", "Indice digital", "Maturit√© financi√®re"
    ])

    # --- Donn√©es normalis√©es pour les mod√®les ---
    new = np.array(raw_input).reshape(1, -1)
    cols_to_normalize = [1, 4, 5, 7, 8, 9, 10, 11, 16, 17, 18]
    try:
        new[:, cols_to_normalize] = encoder.transform(new[:, cols_to_normalize])
    except Exception:
        st.warning("‚ö†Ô∏è Normalisation ignor√©e (colonnes diff√©rentes du mod√®le).")

    submitted = st.form_submit_button("üîé Soumettre", type="primary")

    if submitted:
        try:
            # Pr√©dictions 
            predi_log = logit.predict_proba(new)      #[0,1]
            predi_randomF = RandomForest.predict_proba(new)
            predi_Tree = Tree.predict_proba(new)
            predi_dl = model_Dl.predict(new)  #[0]

            # Moyenne des probabilit√©s
            proba_accept = (
                get_proba_accept(predi_log) +
                get_proba_accept(predi_randomF) +
                get_proba_accept(predi_Tree) +
                get_proba_accept(predi_dl)
            ) / 4

            st.write("### üìä Calcul du Score de Cr√©dit en cours...")
            progress_bar = st.progress(0)
            for percent_complete in range(100):
                time.sleep(0.01)
                progress_bar.progress(percent_complete + 1)

            # --- M√©thode B√¢le II/III ---
            pd_client = 1 - proba_accept     # la proba d'√™tre r√©fus√©
            lgd = 0.45                       # perte en cas de d√©faut (45%)
            ead = montant_demande
            perte_attendue = pd_client * lgd * ead   #Lossi = Di √ó EADi √ó LGDi

            st.success(f"### Votre Score de cr√©dit est {proba_accept*1000:.0f} ")
                #explique pourquoi pas √©ligible


            st.subheader("üìä Analyse B√¢le II/III")
            st.write(f"- **Probabilit√© de d√©faut (PD)** : {pd_client:.2%}")
            st.write(f"- **Perte en cas de d√©faut (LGD)** : {lgd:.0%}")
            st.write(f"- **Exposition au d√©faut (EAD)** : {ead:,.0f} FCFA")
            st.write(f"- **Perte attendue (EL)** : {perte_attendue:,.0f} FCFA")
            st.write(f"- **Seuil de risque (configur√©)** : {seuil_risque:,.0f} FCFA")

            if perte_attendue < seuil_risque:
                st.success("‚úÖ Cr√©dit accord√© : la perte attendue est inf√©rieure au seuil de risque.")
                st.balloons()
            else:
                st.error("‚ùå Cr√©dit refus√© : la perte attendue d√©passe le seuil de risque.")
                st.warning("üëâ Raisons principales du refus :")
                show_explanations(RandomForest, raw_df, proba_accept, 0, st)

        except Exception as e:
            st.error(f"üö® Une erreur est survenue : {e}")
            st.info("V√©rifiez vos donn√©es ou contactez le support : fidelallou@gmail.com")

# --- Note r√©glementaire ---
st.markdown("---")
st.info("""
### üìë Note r√©glementaire
L‚Äô√©valuation du cr√©dit repose sur les standards internationaux du **Comit√© de B√¢le**  
(**B√¢le II/III**), utilis√©s par les banques pour mesurer :

- **PD (Probability of Default)** : Probabilit√© de d√©faut  
- **LGD (Loss Given Default)** : Perte en cas de d√©faut  
- **EAD (Exposure At Default)** : Exposition au d√©faut  
- **EL (Expected Loss)** : Perte attendue  

Ces normes sont reconnues √† l‚Äô√©chelle mondiale et servent de r√©f√©rence en mati√®re de **gestion des risques bancaires**.
""")


