from calendar import c
from hmac import new
from click import confirm, option
from pyparsing import White
import streamlit as st
import pandas as pd
import numpy as np
import pickle
import joblib
import os
from PIL import Image

# Importation de l'ic√¥ne
icon = Image.open('CredScoreAl.ico')

# Param√®tre de l'application
st.set_page_config(
    page_title='CredScoreAL.IA',
    page_icon=icon,
    layout='centered',
    initial_sidebar_state='auto',
    menu_items={"Get Help": "mailto:fidelallou@gmail.com",
                "About": """
                    ## CredScoreAL.ia
                    Une plateforme innovante de credit scoring  üí≥  
                    D√©velopp√©e par **Fidel Allou**,**YOUSSOUF Y. TRAORE** ,**DARI O. MOHAMADOU**
                    üìß Contact : [fidelallou@gmail.com](mailto:fidelallou@gmail.com)  
                    üåê Site web : [digital-pay.com](https://digital-pay.com)
                 """
                }
)

# Titre de l'application Streamlit
st.title('Bienvenu sur CredScoreAL.ia ')

# Menu Sidebar
def show_user_name(utilisateur):
    st.info(f" **Bienvenu {utilisateur}**")

st.sidebar.title('Menu Apli')
utilisateur = st.sidebar.text_input(" Entrez votre nom svp")

# Chargement des mod√®les
def load_model(model_path):
    with open(model_path, 'rb') as file:
        model = pickle.load(file)
    # V√©rification du type de mod√®le
    if isinstance(model, np.ndarray):
        st.error("Le fichier s√©lectionn√© n'est pas un mod√®le valide. Veuillez choisir un fichier .pkl ou .joblib contenant un mod√®le scikit-learn ou similaire.")
        return None
    return model

models_folder = st.sidebar.text_input(
    "Chemin du dossier des mod√®les:",
    value="../models/",
    help="Dossier contenant les mod√®les (.pkl ou .joblib)"
)

# Liste des mod√®les disponibles
available_models = []
if os.path.exists(models_folder):
    for file in os.listdir(models_folder):
        if file.endswith('.pkl') or file.endswith('.joblib'):
            available_models.append(file)
available_models = sorted(available_models)

# S√©lection du mod√®le
selected_model = st.sidebar.selectbox(
    "Choisissez un mod√®le:",
    options=["Aucun"] + available_models,
    help="S√©lectionnez un mod√®le dans la liste"
)

# Chargement du mod√®le (une seule fois)
model = None
if selected_model != "Aucun":
    model_path = os.path.join(models_folder, selected_model)
    model = load_model(model_path)

# Formulaire principal toujours affich√©
with st.form("form_score"):
    st.subheader("üë§ Informations Personnelles")
    age = st.number_input("√Çge", min_value=18, max_value=100, value=35)
    statut_propretaire = st.selectbox("Statut propri√©taire", ["Propri√©taire", "Locataire", "Autre"])
    statut_propretaire_enc = {"Propri√©taire": 2, "Locataire": 1, "Autre": 0}[statut_propretaire]
    zone_habitat = st.number_input("Zone d'habitat : [Urbain:1, Rurale: 0]", min_value=0, max_value=1, value=0)
    Assurance_sante = st.number_input("Assurance Sant√©: [Oui:1, Non: 0]", min_value=0, max_value=1, value=0)
    if age < 25:
        Classe_age = 1
    elif age >= 25 and age < 35:
        Classe_age = 2
    elif age >= 35 and age < 50:
        Classe_age = 3
    else:
        Classe_age = 4

    st.subheader("[üí∞; üèõÔ∏è] Informations Financi√®res / Bancaire")
    revenus_annuels = st.number_input("Revenus annuels", min_value=0, value=45000, step=1000)
    type_pret = st.selectbox("Cat√©gorie Pr√™t", ["Personnel", "Etude", "PME", "Immobilier", "Autre"])
    type_pret_enc = {"Personnel": 0, "Etude": 1, "PME": 2, "Immobilier": 3, "Autre": 4}[type_pret]
    Historique_defaut = st.number_input("Historique de defaut", min_value=0, value=1, step=1, max_value=1)
    duree_historique = st.number_input("Dur√©e du pr√™t (ann√©es)", min_value=1, max_value=30, value=10)
    montant_demande = st.number_input("Montant demand√©", min_value=1000, value=25000, step=1000)
    Taux_interet = st.number_input("Taux d'Int√©r√™t (%)", min_value=0, max_value=100, step=1, value=30)
    if revenus_annuels >= montant_demande * 0.33:
        cap_remb = 1
    else:
        cap_remb = 0
    solde_moyen = st.number_input("Solde moyen", min_value=0, value=5000, step=100)
    recharge_mensuelle_moy = st.number_input("Recharge mensuelles moyenne", min_value=0, max_value=50, value=5)
    solde_mobile_money_moy = st.number_input("Solde Mobile Money Moyen", min_value=0, max_value=2000000, value=1000)
    whatsapp = st.number_input("Anciennet√© Whatsapp(ann√©es)", min_value=0, max_value=50, value=5)
    Montant_facture_mensuel = st.number_input("Montant factures", min_value=0, max_value=5000000, value=5)
    ratio_facture_charge = 12 * (Montant_facture_mensuel / revenus_annuels)
    indice_digit = (whatsapp + recharge_mensuelle_moy + solde_mobile_money_moy) / 3
    mature_finance = duree_historique / age

    Taux_interet = Taux_interet / 100
    new = [
        age, statut_propretaire_enc, type_pret_enc, Historique_defaut,
        duree_historique, montant_demande, Taux_interet, cap_remb, solde_moyen,
        recharge_mensuelle_moy, solde_mobile_money_moy, whatsapp, Montant_facture_mensuel,
        ratio_facture_charge, indice_digit, mature_finance
    ]
    new = np.array(new).reshape(1, -1)

    submitted = st.form_submit_button("Soumettre", type='primary')
    if submitted:
        if model is not None:
            try:
                prediction = model.predict(new)
                show_user_name(utilisateur)
                st.success(f"Votre score est de {prediction[0]}")
            except Exception as e:
                st.error(f"Erreur lors de la pr√©diction : {e}")
        else:
            st.error("Aucun mod√®le n'est charg√©. Veuillez s√©lectionner ou charger un mod√®le.")







            from calendar import c
from hmac import new
from click import confirm, option
from pyparsing import White
import streamlit as st
import pandas as pd 
import numpy as np  
import pickle
import joblib
import os



#importation des mod√®les 
from PIL import Image
icon = Image.open('CredScoreAl.ico')

# Param√®tre de l'application
st.set_page_config(
    page_title='CredScoreAL.IA',
    page_icon=icon ,
    layout='centered',
    initial_sidebar_state='auto',
    menu_items={"Get Help": "mailto:fidelallou@gmail.com",
                "About": """
                    ## CredScoreAL.ia
                    Une plateforme innovante de credit scoring  üí≥  
                    D√©velopp√©e par **Fidel Allou**,**YOUSSOUF Y. TRAORE** ,**DARI O. MOHAMADOU**
                    üìß Contact : [fidelallou@gmail.com](mailto:fidelallou@gmail.com)  
                    üåê Site web : [digital-pay.com](https://digital-pay.com)
                 """
                }
)
# title de l'appli Streamlit
st.title('Bienvenu sur CredScoreAL.ia ')


# Menu Sidebar
def show_user_name(utilisateur):
    st.info(f" **Bienvenu {utilisateur}**")

st.sidebar.title('Menu Apli')
utilisateur= st.sidebar.text_input(" Entrez votre nom svp")

# chargeement des mod√®les
def load_model(model_path):
    with open(model_path,'rb') as file:
        model = pickle.load(file)
    # V√©rification du type de mod√®le
    if isinstance(model, np.ndarray):
        st.error("Le fichier s√©lectionn√© n'est pas un mod√®le valide. Veuillez choisir un fichier .pkl ou .joblib contenant un mod√®le scikit-learn ou similaire.")
        return None
    return model
models_folder = st.sidebar.text_input(
        "Chemin du dossier des mod√®les:", 
        value="../models/",
        help="Dossier contenant les mod√®les (.pkl ou .joblib)"
    )

logit = joblib.load("../models/LogisticRegression_best_model_optimise_08_2025.pkl")
RandomForest = joblib.load("../models/RandomForest_best_model_optimise_08_2025.pkl")
Tree = joblib.load("../models/DecisionTree_best_model_optimise_08_2025.pkl")



# Liste des mod√®les disponibles
available_models = []
if os.path.exists(models_folder):
    for file in os.listdir(models_folder):
        if file.endswith('.pkl') or file.endswith('.joblib'):
            available_models.append(file)
available_models = sorted(available_models)

#available_models = sorted(available_models, key=lambda m: m.steps[-1][1].__class__.__name__)

# S√©lection du mod√®le
selected_model = st.sidebar.selectbox(
    "Choisissez un mod√®le:",
    options=["Aucun"] + available_models,
    help="S√©lectionnez un mod√®le dans la liste"
)

# Chargement du mod√®le (une seule fois)
model = None
if selected_model != "Aucun":
    model_path = os.path.join(models_folder, selected_model)
    model = load_model(model_path)


# Formulaire principal toujours affich√©
with st.form("form_score"):
    st.subheader("üë§ Informations Personnelles")
    age = st.number_input("√Çge", min_value=18, max_value=100, value=35)
    statut_propretaire = st.selectbox("Statut propri√©taire", ["Propri√©taire", "Locataire", "Autre"])
    statut_propretaire_enc = {"Propri√©taire": 2, "Locataire": 1, "Autre": 0}[statut_propretaire]
    zone_habitat = st.number_input("Zone d'habitat : [Urbain:1, Rurale: 0]", min_value=0, max_value=1, value=0)
    Assurance_sante = st.number_input("Assurance Sant√©: [Oui:1, Non: 0]", min_value=0, max_value=1, value=0)
    if age < 25:
        Classe_age = 1
    elif age >= 25 and age < 35:
        Classe_age = 2
    elif age >= 35 and age < 50:
        Classe_age = 3
    else:
        Classe_age = 4

    st.subheader("[üí∞; üèõÔ∏è] Informations Financi√®res / Bancaire")
    revenus_annuels = st.number_input("Revenus annuels", min_value=0, value=45000, step=1000)
    type_pret = st.selectbox("Cat√©gorie Pr√™t", ["Personnel", "Etude", "PME", "Immobilier", "Autre"])
    type_pret_enc = {"Personnel": 0, "Etude": 1, "PME": 2, "Immobilier": 3, "Autre": 4}[type_pret]
    Historique_defaut = st.number_input("Historique de defaut", min_value=0, value=1, step=1, max_value=1)
    duree_historique = st.number_input("Dur√©e du pr√™t (ann√©es)", min_value=1, max_value=30, value=10)
    montant_demande = st.number_input("Montant demand√©", min_value=1000, value=25000, step=1000)
    Taux_interet = st.number_input("Taux d'Int√©r√™t (%)", min_value=0, max_value=100, step=1, value=30)
    if revenus_annuels >= montant_demande * 0.33:
        cap_remb = 1
    else:
        cap_remb = 0
    solde_moyen = st.number_input("Solde moyen", min_value=0, value=5000, step=100)
    recharge_mensuelle_moy = st.number_input("Recharge mensuelles moyenne", min_value=0, max_value=50, value=5)
    solde_mobile_money_moy = st.number_input("Solde Mobile Money Moyen", min_value=0, max_value=2000000, value=1000)
    whatsapp = st.number_input("Anciennet√© Whatsapp(ann√©es)", min_value=0, max_value=50, value=5)
    Montant_facture_mensuel = st.number_input("Montant factures", min_value=0, max_value=5000000, value=5)
    ratio_facture_charge = 12 * (Montant_facture_mensuel / revenus_annuels)
    indice_digit = (whatsapp + recharge_mensuelle_moy + solde_mobile_money_moy) / 3
    mature_finance = duree_historique / age

    Taux_interet = Taux_interet / 100
    new = [
        age, statut_propretaire_enc, type_pret_enc, Historique_defaut,
        duree_historique, montant_demande, Taux_interet, cap_remb, solde_moyen,
        recharge_mensuelle_moy, solde_mobile_money_moy, whatsapp, Montant_facture_mensuel,
        ratio_facture_charge, indice_digit, mature_finance
    ]
    new = np.array(new).reshape(1, -1)

    submitted = st.form_submit_button("Soumettre", type='primary')
    if submitted:
        if model is not None:
            try:
                prediction = model.predict(new)
                show_user_name(utilisateur)
                st.success(f"Votre score est de {prediction[0]}")
            except Exception as e:
                st.error(f"Erreur lors de la pr√©diction : {e}")
        else:
            st.error("Aucun mod√®le n'est charg√©. Veuillez s√©lectionner ou charger un mod√®le.")


