with st.form("my_form"):
...     st.write("Inside the form")
...     slider_val = st.slider("Form slider")
...     checkbox_val = st.checkbox("Form checkbox")
...
...     # Every form must have a submit button.
...     submitted = st.form_submit_button("Submit")
...     if submitted:
...         st.write("slider", slider_val, "checkbox", checkbox_val)
>>> st.write("Outside the form")




with st.form("credit_form"):
    st.subheader("👤 Informations Personnelles")
    age = st.number_input("Âge", min_value=18, max_value=100, value=35)
    statut_propretaire = st.selectbox("Statut propriétaire", ["Propriétaire", "Locataire", "Autre"])
# Encodage simple : Propriétaire=2, Locataire=1, Autre=0
    statut_propretaire_enc = {"Propriétaire": 2, "Locataire": 1, "Autre": 0}[statut_propretaire]
    zone_habitat = st.number_input("Zone d'habitat : [Urbain:1, Rurale: 0]", min_value=0, max_value=1, value=0)
    Assurance_sante = st.number_input("Assurance Santé: [Oui:1, Non: 0]", min_value=0, max_value=1, value=0)
    if age < 25:
        Classe_age = 1
    elif age>=25 and age < 35 :
        Classe_age = 2
    elif age >=35 and age < 50 :
        Classe_age = 3
    else:
        Classe_age= 4

# Informations financières / bancaires
    st.subheader("[💰; 🏛️] Informations Financières / Bancaire")
    revenus_annuels = st.number_input("Revenus annuels", min_value=0,  value=45000, step=1000)
    type_pret = st.selectbox("Catégorie Prêt", ["Personnel", "Etude", "PME", "Immobilier", "Autre"])
    # Encodage simple : Personnel=0, Etude=1, PME=2, Immobilier=3, Autre=4
    type_pret_enc = {"Personnel": 0, "Etude": 1, "PME": 2, "Immobilier": 3, "Autre": 4}[type_pret]
    Historique_defaut = st.number_input(" Historique de defaut", min_value=0, value=1,step=1,max_value=1)
    duree_historique = st.number_input("Durée du prêt (années)", min_value=1, max_value=30, value=10)
    montant_demande = st.number_input("Montant demandé", min_value=1000, value=25000, step=1000)
    Taux_interet = st.number_input("Taux d'Intérêt", min_value=00, step=0.1 ,max_value=1,value=0.3)
    if revenus_annuels >= montant_demande*0.33 :
        cap_remb = 1
    else :
        cap_remb = 0 
    solde_moyen = st.number_input("Solde moyen ", min_value=0, value=5000, step=100 )
# Information alternatives
    recharge_mensuelle_moy=st.number_input("Recharge mensuelles moyenne", min_value=0,max_value=50,value=5)  
    solde_mobile_money_moy = st.number_input("Solde Mobile Money Moyen", min_value=0,max_value=2000000,value=1000)  
    whatsapp = st.number_input("Ancienneté Whatsapp(années)", min_value=0,max_value=50,value=5)
    Montant_facture_mensuel = st.number_input("Montant factures", min_value=0,max_value=5000000,value=5)
    ratio_facture_charge = 12 * (Montant_facture_mensuel / revenus_annuels  )
    indice_digit = ( whatsapp + recharge_mensuelle_moy + solde_mobile_money_moy) /3
    mature_finance = duree_historique / age
               
# Informations personnelles
st.form_submit_button("🔮Evaluer le Score de Crédit", type="primary")




# Bouton de prédiction
predict_button = st.form_submit_button("🔮Evaluer le Score de Crédit", type="primary")
if predict_button and model is not None:
    features = np.array([ age,revenus_annuels,statut_propretaire_enc,
                type_pret_enc,montant_demande,Taux_interet,
                Historique_defaut,duree_historique,recharge_mensuelle_moy,
                solde_mobile_money_moy,whatsapp,Montant_facture_mensuel,
                zone_habitat,Assurance_sante,Classe_age,cap_remb,
                ratio_facture_charge,indice_digit,mature_finance]).reshape(1, -1)
            # Prédiction
if hasattr(model, 'predict_proba'):
                prediction_proba = model.predict_proba(features)[0]
                prediction = model.predict(features)[0]
                st.success("✅ Prédiction réalisée!")
                credit_score = int(300 + (prediction_proba.max() * 550))
                if credit_score >= 740:
                    st.success("🟢 **Excellent** - Crédit approuvé avec conditions favorables")
                    risk_level = "Très faible"
                elif credit_score >= 670:
                    st.info("🟡 **Bon** - Crédit probablement approuvé")
                    risk_level = "Faible"
                elif credit_score >= 580:
                    st.warning("🟠 **Moyen** - Crédit à examiner")
                    risk_level = "Modéré"
                else:
                    st.error("🔴 **Faible** - Risque élevé de refus")
                    risk_level = "Élevé"
                st.write(f"**Niveau de risque:** {risk_level}")
                if len(prediction_proba) == 2:
                    st.write(f"**Probabilité d'approbation:** {prediction_proba[1]:.1%}")
                    st.write(f"**Probabilité de refus:** {prediction_proba[0]:.1%}")
                if prediction == 1:
                    st.success("🟢 **Crédit Approuvé**")
                else:
                    st.error("🔴 **Crédit Refusé**")
else:
    prediction = model.predict(features)[0]
    st.success("✅ Prédiction réalisée!")
    if prediction == 1:
        st.success("🟢 **Crédit Approuvé**")
    else:
        st.error("🔴 **Crédit Refusé**")
# Section d'analyse des facteurs
if model is not None:
    st.markdown("---")
    st.header("📈 Analyse des Facteurs de Risque")
    
# Footer
st.markdown("---")
st.markdown("""
<div style='text-align: center; color: #666666; font-size: 0.8em;'>
    🏦 Système de Prédiction de Score de Crédit | 
    Développé avec Streamlit | 
    ⚠️ Outil d'aide à la décision uniquement
</div>
""", unsafe_allow_html=True)

# Instructions d'utilisation
with st.sidebar.expander("📖 Instructions d'utilisation"):
    st.markdown("""
    ### Comment utiliser cette application:
    
    1. **Chargement du modèle:** 
       - Entrez le chemin vers votre modèle pré-entraîné dans la barre latérale
       - Formats supportés: .pkl (pickle) et .joblib
    
    2. **Saisie des données:**
       - Remplissez tous les champs du formulaire
       - Les données sont organisées par catégories pour faciliter la saisie
    
    3. **Prédiction:**
       - Cliquez sur "Prédire le Score de Crédit"
       - Le système affichera le score et les probabilités
    
    ### Variables utilisées:
                **Données TRaditionnelles**
    - **Personnelles:** Age,Statut_propriete,
    - **Financières / Bancaires:** revenus,Assurance_sante, type d'emploi, ancienneté, 
                , montant demandé, Taux d'interêt, catégorie de prêt
                 historique de crédit, Maturité finacière,cap_remb
    - **Données alternatives** :Ancienneté Whatsapp , Montant_factures_mensuelles, 
                Zone d'habitation, REcharge mensuelle, Solde Mobile_money, Indice_digitale,ratio_facture_charge ,
                
    - ** '', '',  

    
    ### Configuration des modèles:
    - **Dossier par défaut:** `models/` (modifiable)
    - **Formats supportés:** `.pkl` (pickle) et `.joblib`
    - **Actualisation:** Bouton pour rafraîchir la liste des modèles
    - **Saisie manuelle:** Possible si aucun modèle n'est trouvé dans le dossier
    
    ### Structure de dossier recommandée:
    ```
    votre_projet/
    ├── app.py (ce fichier)
    ├── models/
    │   ├── model_v1.pkl
    │   ├── model_v2.joblib
    │   └── best_model.pkl
    └── requirements.txt
    ```
    
    ### Notes importantes:
    - Adaptez les variables selon votre modèle spécifique
    - Vérifiez que l'encodage des variables correspond à votre entraînement
    - Cet outil est une aide à la décision, pas un système de décision automatique
    - En cas de difficultés veuillez contacter les personnes dont les noms figure dans 
      la section About
    """)